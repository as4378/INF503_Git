#include <iostream>
#include <fstream>
#include <cstdlib>
#include <string>
#include <cmath>
#include <sys/time.h>

using namespace std;

struct SW{
	char* seqA;
	char* seqB;
	char* alignment;
};

SW* SmithWaterman(char a[], char b[], bool display);
int FindMax(int, int, int);
int GetScore(char, char);
void PerformAlignment(char* filePathReads, char* filePathGenome);
void PerformRandomAlignments(char* filePathGenome, int size);
void PerformRandomAlignments1(char* filePathGenome, int size);
void PerformSeedBasedAlignment(char* filePathGenome, char* filePathRead);
SW* SmithWaterman1(char a[], char b[], bool display);
void PerformRandomSeedBasedAlignment(char* filePathGenome, int size);
unsigned int CalculateRadix(char string[]);
void PrintCurrentTime();

int GetScore(char a, char b){
	if (a == b){
		return 2;
	}
	else if(a == ' ' || b == ' '){
		return -3;
	}
	else
		return -1;
}

int FindMax(int a, int b, int c){
	int max;
	if(a > b && a > c)
		max = a;
	else if (b > a && b > c)
		max = b;
	else
		max = c;
	return max;
}

SW* SmithWaterman(char a[], char b[], bool display){
	SW* result = new SW;
	int sizeA;
	int sizeB;
	int left = 0;
	int up = 0;
	int diag = 0;
	int index = 0;
	
	int max = 0;
	int row = 0;
	int col = 0;
	
	int t = 0;
	while(a[t] != '\0'){
		t++;
	}
	sizeA = t;
	
	t = 0;
	while(b[t] != '\0'){
		t++;
	}
	sizeB = t;
	
	//int matrix[sizeA + 1][sizeB + 1];
	int** matrix = new int*[sizeA + 1];
	
	for(int i = 0; i < (sizeA + 1); i++){
		matrix[i] = new int[sizeB + 1];
	}
	
	for(int i = 0; i < (sizeA + 1); i++){
		matrix[0][i] = 0;
	}
	
	for(int i = 0; i < (sizeB + 1); i++){
		matrix[i][0] = 0;
	}
	
	for(int i = 1; i < (sizeA + 1); i++){
		for(int j = 1; j < (sizeB + 1); j++){
			left = matrix[i][j - 1] + GetScore(a[i - 1], ' ');
			up = matrix[i - 1][j] + GetScore(b[j - 1], ' ');
			diag = matrix[i - 1][j - 1] + GetScore(a[i - 1], b[j - 1]);
			matrix[i][j] = FindMax(left, up, diag);
			matrix[i][j] = matrix[i][j] < 0 ? 0 : matrix[i][j];
		}
	}
	
	if(display == true){
		int size = sizeA > sizeB ? sizeB : sizeA;
	
		//char* s3 = new char[size + 1];
		//char* s1 = new char[sizeA + 1];
		//char* s2 = new char[sizeB + 1];

		char s3[size + 1];
		char s1[size + 1];
		char s2[size + 1];
	
		
		for(int i = 0; i < sizeA + 1; i++){
			for(int j = 0; j < sizeB + 1; j++){
				row = (matrix[i][j] > max) ? i : row; 
				col = (matrix[i][j] > max) ? j : col; 
				max = (matrix[i][j] > max) ? matrix[i][j] : max; 
			}
		}
		
		index = 0;	
		diag = 1;
		while(diag != 0){
			left = matrix[row][col - 1];
			up = matrix[row - 1][col];
			diag = matrix[row - 1][col - 1];
			//if(diag == 0){
			//	break;
			//}
			if(diag == 0 || (diag >= left && diag >= up) ){
				s1[index] = a[row - 1];
				s2[index] = b[col - 1];
				s3[index] = a[row - 1] == b[col - 1] ? '|' : 'x';
				row = row - 1;
				col = col - 1;
			}
			else if(left >= up && left >= diag){
				s1[index] = '_';
				s2[index] = b[col - 1];
				s3[index] = ' ';
				row = row;
				col = col - 1;
				
			}
			else if(up >= left && up >= diag){
				s1[index] = a[row - 1];
				s2[index] = '_';
				s3[index] = ' ';
				row = row - 1;
				col = col;
			}
			index++;
		}
		
		s1[index] = '\0';
		s2[index] = '\0';
		s3[index] = '\0';
		index--;
		int counter = 0;
		char temp;
		while(counter <= index){
			temp = s1[counter];
			s1[counter] = s1[index];
			s1[index] = temp;
			
			temp = s2[counter];
			s2[counter] = s2[index];
			s2[index] = temp;
			
			temp = s3[counter];
			s3[counter] = s3[index];
			s3[index] = temp;
			
			counter++;
			index--;
		}
	
		cout << s1 << endl;
		cout << s3 << endl;
		cout << s2 << endl;
	}

	return result;
}


SW* SmithWaterman1(char a[], char b[], bool display){
	SW* result = new SW;
	int sizeA;
	int sizeB;
	int left = 0;
	int up = 0;
	int diag = 0;
	int index = 0;
	
	int max = 0;
	int row = 0;
	int col = 0;
	
	int t = 0;
	while(a[t] != '\0'){
		t++;
	}
	sizeA = t;
	
	t = 0;
	while(b[t] != '\0'){
		t++;
	}
	sizeB = t;
	
	int matrix[sizeA + 1][sizeB + 1];
	
	for(int i = 0; i < (sizeA + 1); i++){
		matrix[0][i] = 0;
	}
	
	for(int i = 0; i < (sizeB + 1); i++){
		matrix[i][0] = 0;
	}
	
	for(int i = 1; i < (sizeA + 1); i++){
		for(int j = 1; j < (sizeB + 1); j++){
			left = matrix[i][j - 1] + GetScore(a[i - 1], ' ');
			up = matrix[i - 1][j] + GetScore(b[j - 1], ' ');
			diag = matrix[i - 1][j - 1] + GetScore(a[i - 1], b[j - 1]);
			matrix[i][j] = FindMax(left, up, diag);
			matrix[i][j] = matrix[i][j] < 0 ? 0 : matrix[i][j];
		}
	}
	
	if(display == true){
		int size = sizeA > sizeB ? sizeB : sizeA;
	
		//char* s3 = new char[size + 1];
		//char* s1 = new char[sizeA + 1];
		//char* s2 = new char[sizeB + 1];

		char s3[size + 1];
		char s1[size + 1];
		char s2[size + 1];
	
		
		for(int i = 0; i < sizeA + 1; i++){
			for(int j = 0; j < sizeB + 1; j++){
				row = (matrix[i][j] > max) ? i : row; 
				col = (matrix[i][j] > max) ? j : col; 
				max = (matrix[i][j] > max) ? matrix[i][j] : max; 
			}
		}
		
		index = 0;	
		diag = 1;
		while(diag != 0){
			left = matrix[row][col - 1];
			up = matrix[row - 1][col];
			diag = matrix[row - 1][col - 1];
			//if(diag == 0){
			//	break;
			//}
			if(diag == 0 || (diag >= left && diag >= up) ){
				s1[index] = a[row - 1];
				s2[index] = b[col - 1];
				s3[index] = a[row - 1] == b[col - 1] ? '|' : 'x';
				row = row - 1;
				col = col - 1;
			}
			else if(left >= up && left >= diag){
				s1[index] = '_';
				s2[index] = b[col - 1];
				s3[index] = ' ';
				row = row;
				col = col - 1;
				
			}
			else if(up >= left && up >= diag){
				s1[index] = a[row - 1];
				s2[index] = '_';
				s3[index] = ' ';
				row = row - 1;
				col = col;
			}
			index++;
		}
		
		s1[index] = '\0';
		s2[index] = '\0';
		s3[index] = '\0';
		index--;
		int counter = 0;
		char temp;
		while(counter <= index){
			temp = s1[counter];
			s1[counter] = s1[index];
			s1[index] = temp;
			
			temp = s2[counter];
			s2[counter] = s2[index];
			s2[index] = temp;
			
			temp = s3[counter];
			s3[counter] = s3[index];
			s3[index] = temp;
			
			counter++;
			index--;
		}
	
		cout << s1 << endl;
		cout << s3 << endl;
		cout << s2 << endl;
	}

	return result;
}


void PerformAlignment(char* filePathReads, char* filePathGenome){
	ifstream fileReads;
	ifstream fileGenome;
	char genome[10001];
	char read[51];
	char charRead;
	char charGenome;
	int index = 0;
	
	if(fileReads.is_open()){
		fileReads.close();
	}
	fileReads.open(filePathReads);
	
	if(fileGenome.is_open()){
		fileGenome.close();
	}
	fileGenome.open(filePathGenome);
	while(fileGenome.get(charGenome) && index < 10000){
		if (charGenome == 'A' || charGenome == 'C' || charGenome == 'G' || charGenome == 'T'){
			genome[index] = charGenome;
			index++;
		}
	}
	genome[index] = '\0';
	index = 0;
	int rcount = 0;
	while(fileReads.get(charRead)){
		if (charRead == 'A' || charRead == 'C' || charRead == 'G' || charRead == 'T'){
			read[index] = charRead;
			index++;
		}
		if(index == 50){
			read[index] = '\0';
			index = 0;
			rcount++;
			cout << "for read " << rcount << ": " << endl;
			SmithWaterman(genome, read, true);
		}
	}
}

void PerformRandomAlignments(char* filePathGenome, int size){
	char charGenome;
	int random;
	int index = 0;
	char read[101];
	char* genome = new char[10001];
	ifstream fileGenome;
	if(fileGenome.is_open()){
		fileGenome.close();
	}
	fileGenome.open(filePathGenome);
	while(fileGenome.get(charGenome) && index < 10000){
		if (charGenome == 'A' || charGenome == 'C' || charGenome == 'G' || charGenome == 'T'){
			genome[index] = charGenome;
			index++;
		}
	}
	genome[index] = '\0';
	for(int i = 0; i < size; i++){
		for(int j = 0; j < 100; j++){
			random = rand() % 4;
			if(random == 0){
				read[j] = 'A';	
			}
			else if(random == 1){
				read[j] = 'C';
			}
			else if(random = 2){
				read[j] = 'G';
			}
			else if(random == 3){
				read[j] = 'T';
			}	
		}
		read[100] = '\0';
		SmithWaterman(genome, read, false);
	}
}

void PerformRandomAlignments1(char* filePathGenome, int size){
	char charGenome;
	int random;
	int index = 0;
	char read[101];
	char genome[10001];
	ifstream fileGenome;
	if(fileGenome.is_open()){
		fileGenome.close();
	}
	fileGenome.open(filePathGenome);
	while(fileGenome.get(charGenome) && index < 10000){
		if (charGenome == 'A' || charGenome == 'C' || charGenome == 'G' || charGenome == 'T'){
			genome[index] = charGenome;
			index++;
		}
	}
	fileGenome.close();
	genome[index] = '\0';
	for(int i = 0; i < size; i++){
		for(int j = 0; j < 100; j++){
			random = rand() % 4;
			if(random == 0){
				read[j] = 'A';
			}
			else if(random == 1){
				read[j] = 'C';
			}
			else if(random == 2){
				read[j] = 'G';
			}
			else{
				read[j] = 'T';
			}
		}
		read[100] = '\0';
		SmithWaterman1(genome, read, false);
	}
}

void PrintCurrentTime(){
	time_t rawtime;
	time(&rawtime);
 	tm *ltm = localtime(&rawtime);
		
	cout << ltm->tm_hour << ":";
   	cout << ltm->tm_min << ":";
   	cout << ltm->tm_sec << "\n";
}

void PerformSeedBasedAlignment(char* filePathGenome, char* filePathRead){
	ifstream fileGenome;
	ifstream fileRead;
	char charGenome;
	char charRead;
	int index = 0;
	char seed[11];
	int count = 0;
	int initial = 0;
	int radix;
	
	char* genome = new char[10001];
	
	if(fileGenome.is_open()){
		fileGenome.close();
	}
	int* hash = new int[9990];
	for(int i = 0; i < 9990; i++){
		hash[i] = -1;
	}
	fileGenome.open(filePathGenome);
	
	while(fileGenome.get(charGenome) && index < 10000){
		if (charGenome == 'A' || charGenome == 'C' || charGenome == 'G' || charGenome == 'T'){
			genome[index] = charGenome;
			index++;
		}
	}
	genome[index] = '\0';
	index = 0;
	for(int i = 0; i < 9990; i = i + 11){
		for(int j = 0; j < 11; j++){
			seed[j] = genome[i + j];
		}
		radix = CalculateRadix(seed);
		if(hash[radix%9990] == -1){
			hash[radix%9990] = i;	
		}
	}
	
	if(fileRead.is_open()){
		fileRead.close();
	}
	fileRead.open(filePathRead);
	index = 0;
	count = 0;
	char read[51];
	char segment[51];
	int rcount = 0;
	while(fileRead.get(charRead)){
		if (charRead == 'A' || charRead == 'C' || charRead == 'G' || charRead == 'T'){
			read[index] = charRead;
			index++;
		}
		if(index == 50){
			index = 0;
			read[50] = '\0';
			rcount++;
			cout << "for read " << rcount << ": " << endl;
			for(int i = 0; i < 40; i = i + 11){
				for(int j = 0; j < 11; j++){
					seed[j] = read[i + j];
				}
				radix = CalculateRadix(seed);
				
				if(hash[radix%9990] != -1){
					if(hash[radix%9990] + 49 < 10000){
						for(int k = hash[radix%9990]; k < hash[radix%9990] + 50; k++){
							segment[k - hash[radix%9990]] = genome[k];
						}
						segment[50] = '\0';
						
						SmithWaterman(segment, read, true);
						break;
					}
					else{
						int initial = 50 - 1 - (10000 - hash[radix%9990]);
						for(int k = initial; k < initial + 50; k++){
							segment[k - initial] = genome[k];
						}
						segment[50] = '\0';
						SmithWaterman(segment, read, true);
						break;
					}	
				}
			}
		}
	}
	fileGenome.close();
	fileRead.close();
}

void PerformRandomSeedBasedAlignment(char* filePathGenome, int size){
	ifstream fileGenome;
	char charGenome;
	int index = 0;
	char seed[11];
	int count = 0;
	int initial = 0;
	int random;
	int radix;
	
	char* genome = new char[10001];
	
	if(fileGenome.is_open()){
		fileGenome.close();
	}
	int* hash = new int[9990];
	for(int i = 0; i < 9990; i++){
		hash[i] = -1;
	}
	fileGenome.open(filePathGenome);
	
	while(fileGenome.get(charGenome) && index < 10000){
		if (charGenome == 'A' || charGenome == 'C' || charGenome == 'G' || charGenome == 'T'){
			genome[index] = charGenome;
			index++;
		}
	}
	genome[index] = '\0';
	index = 0;
	for(int i = 0; i < 9990; i = i + 11){
		for(int j = 0; j < 11; j++){
			seed[j] = genome[i + j];
		}
		radix = CalculateRadix(seed);
		if(hash[radix%9990] == -1){
			hash[radix%9990] = i;	
		}
	}
	
	index = 0;
	count = 0;
	char read[51];
	char segment[51];
	for(int l = 0; l < size; l++){
		for(int z = 0; z < 50; z++){
			random = rand() % 4;
			if(random == 0){
				read[z] = 'A';	
			}
			else if(random == 1){
				read[z] = 'C';
			}
			else if(random = 2){
				read[z] = 'G';
			}
			else if(random == 3){
				read[z] = 'T';
			}	
		}
		read[50] = '\0';
		for(int i = 0; i < 40; i = i + 11){
				for(int j = 0; j < 11; j++){
					seed[j] = read[i + j];
				}
				radix = CalculateRadix(seed);
				if(hash[radix%9990] != -1){
					if(hash[radix%9990] + 49 < 10000){
						for(int k = hash[radix%9990]; k < hash[radix%9990] + 50; k++){
							segment[k - hash[radix%9990]] = genome[k];
						}
						segment[50] = '\0';
						SmithWaterman(segment, read, false);
						break;
					}
					else{
						int initial = 50 - 1 - (10000 - hash[radix%9990]);
						for(int k = initial; k < initial + 50; k++){
							segment[k - initial] = genome[k];
						}
						segment[50] = '\0';
						SmithWaterman(segment, read, false);
						break;
					}	
				}
			}
		}
		fileGenome.close();
	}


unsigned int CalculateRadix(char string[]){
			unsigned int value = 0; //return value
			int i = 10; //array index variable
			int pos = 0; //position of current character from right end
			char current; // for storing the character at a specific index in string
			int base = 4; //base = 4, as there are 4 alphabets
			int posValue; //equivalent integer value of a alphabet
			
			while(i > 0){
				current = string[i - 1];
				switch (current){
					case 'A':
						posValue = 0;
						break;
					case 'C':
						posValue = 1;
						break;
					case 'G':
						posValue = 2;
						break;
					case 'T':
						posValue = 3;
						break;
					}
				value += pow(base, pos) * posValue;
				
				pos++;
				i--;
			}
			
			return value;
}
		
int main(int argc, char* argv[])
{
	char* fileGenome = argv[1];
	char* fileRead = argv[2];
	char* problem = argv[3];
	
	SW* result;
	
	if(problem[0] == 'A'){
		PerformAlignment(fileRead, fileGenome);
	}
	else if(problem[0] == 'B'){
		cout << "for 1000 started at: " << endl;
		PrintCurrentTime();
		PerformRandomAlignments1(fileGenome, 10);
		cout << "ended at: " << endl;
		PrintCurrentTime();
		cout << "for 10000 started at: " << endl;
		PrintCurrentTime();
		PerformRandomAlignments1(fileGenome, 10000);
		cout << "ended at: " << endl;
		PrintCurrentTime();
		cout << "for 100000 started at: " << endl;
		PrintCurrentTime();
		PerformRandomAlignments1(fileGenome, 100000);
		cout << "ended at: " << endl;
		PrintCurrentTime();
		cout << "for 1000000 started at: " << endl;
		PrintCurrentTime();
		PerformRandomAlignments1(fileGenome, 1000000);
		cout << "ended at: " << endl;
		PrintCurrentTime();	
	}
	else if(problem[0] == 'C'){
		PerformSeedBasedAlignment(fileGenome, fileRead);
	}
	else if(problem[0] == 'D'){
		cout << "for 1000 started at: " << endl;
		PrintCurrentTime();
		PerformRandomSeedBasedAlignment(fileGenome, 1000);
		cout << "ended at: " << endl;
		PrintCurrentTime();
		cout << "for 10000 started at: " << endl;
		PrintCurrentTime();
		PerformRandomSeedBasedAlignment(fileGenome, 10000);
		cout << "ended at: " << endl;
		PrintCurrentTime();
		cout << "for 100000 started at: " << endl;
		PrintCurrentTime();
		PerformRandomSeedBasedAlignment(fileGenome, 100000);
		cout << "ended at: " << endl;
		PrintCurrentTime();
		cout << "for 1000000 started at: " << endl;
		PrintCurrentTime();
		PerformRandomSeedBasedAlignment(fileGenome, 1000000);
		cout << "ended at: " << endl;
		PrintCurrentTime();

	}
	
	return 0;	
}
